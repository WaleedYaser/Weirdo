#pragma once

static zero_color_t c_green = zero_color_t{35, 136, 34, 255};
static zero_color_t c_brown = zero_color_t{119, 84, 73, 255};

static constexpr int tile_map_count_x = 32;
static constexpr int tile_map_count_y = 16;

static uint8_t tile_map[tile_map_count_y][tile_map_count_x] = {
	{1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**//**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 2},
	{1, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**//**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 1, 2},
	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},
	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},

	{1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**//**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 0, 0, 0, 0, /**/ 1, 1, 1, 2},
	{1, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**//**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 0, 0, 0, 0, /**/ 2, 2, 1, 2},
	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},
	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},

	{1, 1, 1, 1, /**/ 1, 1, 0, 0, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**//**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 2},
	{1, 2, 2, 2, /**/ 2, 2, 0, 0, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**//**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 1, 2},
	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},
	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},

	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 1, 1, 1, 2, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},
	{1, 2, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**//**/ 1, 1, 1, 2, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, 1, 2},
	{1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**//**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 1, /**/ 1, 1, 1, 2},
	{2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**//**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2}};

inline static kuro_aa_rect_t
kuro_tile_map_rect(int i, int j)
{
	zero_color_t tile_color = {};
	switch (tile_map[j][i])
	{
		case 1:
			tile_color = c_green;
			break;
		case 2:
			tile_color = c_brown;
			break;
		default:
			return kuro_aa_rect_t{};
	};

	float x = (i - tile_map_count_x / 2.0f);
	float y = (tile_map_count_y / 2.0f - j - 1);

	vec2_t bl = vec2_t{x, y};
	vec2_t tr = vec2_t{x + 1.0f, y + 1.0f};

	kuro_aa_rect_t tile_rect = kuro_aa_rect_t{bl, tr, tile_color};
	return tile_rect;
}

inline static bool
kuro_tile_map_point_valid(vec2_t p)
{
	int x = (int)(p.x + tile_map_count_x / 2.0f);
	int y = (int)(tile_map_count_y / 2.0f - p.y);

	if (tile_map[y][x] == 0)
		return true;
	return false;
}
